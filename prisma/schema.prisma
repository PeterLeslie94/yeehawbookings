// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Auth.js models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  emailVerified DateTime?
  name          String?
  password      String?
  role          UserRole  @default(CUSTOMER)
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  bookings Booking[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Business models
model Booking {
  id                String         @id @default(cuid())
  bookingReference  String         @unique
  userId            String?
  guestEmail        String?
  guestName         String?
  bookingDate       DateTime
  status            BookingStatus  @default(CONFIRMED)
  totalAmount       Float
  discountAmount    Float          @default(0)
  finalAmount       Float
  customerNotes     String?
  promoCodeId       String?
  stripePaymentId   String?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt

  user       User?          @relation(fields: [userId], references: [id])
  promoCode  PromoCode?     @relation(fields: [promoCodeId], references: [id])
  items      BookingItem[]
}

model Package {
  id           String                @id @default(cuid())
  name         String
  description  String
  inclusions   String[]
  maxGuests    Int
  defaultPrice Float?
  isActive     Boolean               @default(true)
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt

  pricing      PackagePricing[]
  availability PackageAvailability[]
  bookingItems BookingItem[]
}

model Extra {
  id          String                @id @default(cuid())
  name        String
  description String?
  price       Float
  isActive    Boolean               @default(true)
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt

  availability ExtraAvailability[]
  bookingItems BookingItem[]
}

model PackagePricing {
  id        String   @id @default(cuid())
  packageId String
  date      DateTime
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  package Package @relation(fields: [packageId], references: [id], onDelete: Cascade)

  @@unique([packageId, date])
}

model PackageAvailability {
  id               String   @id @default(cuid())
  packageId        String
  date             DateTime
  totalQuantity    Int
  availableQuantity Int
  isAvailable      Boolean  @default(true)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  package Package @relation(fields: [packageId], references: [id], onDelete: Cascade)

  @@unique([packageId, date])
}

model ExtraAvailability {
  id               String   @id @default(cuid())
  extraId          String
  date             DateTime
  totalQuantity    Int
  availableQuantity Int
  isAvailable      Boolean  @default(true)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  extra Extra @relation(fields: [extraId], references: [id], onDelete: Cascade)

  @@unique([extraId, date])
}

model BlackoutDate {
  id        String   @id @default(cuid())
  date      DateTime @unique
  reason    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PromoCode {
  id               String           @id @default(cuid())
  code             String           @unique
  description      String?
  discountType     DiscountType
  discountValue    Float
  minPurchaseAmount Float?
  maxDiscountAmount Float?
  usageLimit       Int?
  usageCount       Int              @default(0)
  validFrom        DateTime
  validUntil       DateTime?
  isActive         Boolean          @default(true)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  bookings Booking[]
}

model BookingItem {
  id         String      @id @default(cuid())
  bookingId  String
  itemType   ItemType
  packageId  String?
  extraId    String?
  quantity   Int
  unitPrice  Float
  totalPrice Float
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  booking  Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  package  Package? @relation(fields: [packageId], references: [id])
  extra    Extra?   @relation(fields: [extraId], references: [id])
}

model EmailQueue {
  id           String       @id @default(cuid())
  recipient    String
  subject      String
  emailType    EmailType
  content      Json
  scheduledFor DateTime
  sentAt       DateTime?
  status       EmailStatus  @default(PENDING)
  error        String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model DailyCutoffTime {
  id         String   @id @default(cuid())
  dayOfWeek  Int      // 0-6, where 0 is Sunday
  cutoffTime String   // Format: "HH:mm" in 24-hour format
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([dayOfWeek])
}

// Enums
enum UserRole {
  CUSTOMER
  ADMIN
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  REFUNDED
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
}

enum ItemType {
  PACKAGE
  EXTRA
}

enum EmailType {
  BOOKING_CONFIRMATION
  BOOKING_REMINDER
  REFUND_NOTIFICATION
  ADMIN_NOTIFICATION
}

enum EmailStatus {
  PENDING
  SENT
  FAILED
}